{"version":3,"sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","Auth","auth","useContext","AuthContext","useState","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","useForm","email","value","isValid","password","formState","inputHandler","setFormData","authSubmitHandler","event","preventDefault","console","log","inputs","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","onClick","undefined","prevMode"],"mappings":"qGAAA,0BAYeA,IARF,SAACC,GACZ,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,2/MCyIEC,UAjIF,WACT,IAAMC,EAAOC,qBAAWC,KACxB,EAAsCC,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAAgDC,YAAQ,CACpDC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,SAAU,CACNF,MAAO,GACPC,SAAS,KAEd,GATH,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KAWMC,EAAiB,uCAAG,WAAOC,GAAP,8EACtBA,EAAMC,iBAENC,QAAQC,IAAIP,EAAUQ,SAElBpB,EALkB,0CAOaK,EACvBgB,iDACA,OACAC,KAAKC,UAAU,CACXf,MAAOI,EAAUQ,OAAOZ,MAAMC,MAC9BE,SAAUC,EAAUQ,OAAOT,SAASF,QAExC,CACI,eAAgB,qBAfV,OAORe,EAPQ,OAkBd5B,EAAK6B,MAAMD,EAAaE,OAAQF,EAAaG,OAlB/B,oGAuBRC,EAAW,IAAIC,UACZC,OAAO,QAASlB,EAAUQ,OAAOZ,MAAMC,OAChDmB,EAASE,OAAO,OAAQlB,EAAUQ,OAAOW,KAAKtB,OAC9CmB,EAASE,OAAO,WAAYlB,EAAUQ,OAAOT,SAASF,OACtDmB,EAASE,OAAO,QAASlB,EAAUQ,OAAOY,MAAMvB,OA3BlC,UA4BaJ,EAAYgB,kDACnC,OACAO,GA9BU,QA4BRJ,EA5BQ,OAgCd5B,EAAK6B,MAAMD,EAAaE,OAAQF,EAAaG,OAhC/B,qHAAH,sDAmEvB,OACI,kBAAC,IAAMM,SAAP,KACI,kBAAC,IAAD,CAAY7B,MAAOA,EAAO8B,QAAS5B,IACnC,kBAAC,IAAD,CAAMd,UAAU,kBACXW,GAAa,kBAAC,IAAD,CAAgBgC,WAAS,IACvC,8CACA,6BACA,0BAAMC,SAAUrB,IACVf,GACE,kBAAC,IAAD,CACIqC,QAAQ,QACRC,GAAG,OACHC,KAAK,OACLC,MAAM,YACNC,WAAY,CAACC,eACbC,UAAU,uBACVC,QAAS/B,KAGfb,GAAgB,kBAAC,IAAD,CAAa6C,QAAM,EAACP,GAAG,QAAQM,QAAS/B,EAAc8B,UAAU,6BAClF,kBAAC,IAAD,CACIN,QAAQ,QACRC,GAAG,QACHC,KAAK,QACLC,MAAM,SACNC,WAAY,CAACK,eACbH,UAAU,sCACVC,QAAS/B,IAEb,kBAAC,IAAD,CACIwB,QAAQ,QACRC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,0DACVC,QAAS/B,IAEb,kBAAC,IAAD,CAAQ0B,KAAK,SAASS,UAAWpC,EAAUF,SAAUV,EAAc,QAAU,WAEjF,kBAAC,IAAD,CAAQiD,SAAO,EAACC,QAtEF,WACjBlD,EAUDc,EAAY,2BACLF,EAAUQ,QADN,IAEPW,KAAM,CACFtB,MAAO,GACPC,SAAS,GAEbsB,MAAO,CACHvB,MAAO,KACPC,SAAS,MAEd,GAnBHI,EAAY,2BAEDF,EAAUQ,QAFV,IAGHW,UAAMoB,EACNnB,WAAOmB,IAEXvC,EAAUQ,OAAOZ,MAAME,SAAWE,EAAUQ,OAAOT,SAASD,SAepET,GAAe,SAAAmD,GAAQ,OAAKA,OA+CpB,aAAuDpD,EAAc,SAAW","file":"static/js/7.8b4ffa6b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from 'react';\n\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport Input from '../../shared/components/FormElements/Input';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\nimport './Auth.css';\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler, setFormData]  = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const authSubmitHandler = async (event) => {\n        event.preventDefault();\n\n        console.log(formState.inputs);\n        \n        if (isLoginMode) {\n            try {\n                const responseData = await sendRequest(\n                    process.env.REACT_APP_BACKEND_URL + '/users/login',\n                    'POST',\n                    JSON.stringify({\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type': 'application/json'\n                    }\n                );\n                auth.login(responseData.userId, responseData.token);\n            } catch (err) {}\n            \n        } else {\n            try {\n                const formData = new FormData();\n                formData.append('email', formState.inputs.email.value);\n                formData.append('name', formState.inputs.name.value);\n                formData.append('password', formState.inputs.password.value);\n                formData.append('image', formState.inputs.image.value);\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users/signup', \n                    'POST', \n                    formData\n                );\n                auth.login(responseData.userId, responseData.token);\n            } catch (err) {}\n        }\n    }\n\n    const switchModeHandler = () => {\n        if (!isLoginMode) {\n            setFormData(\n                {\n                    ...formState.inputs,\n                    name: undefined,\n                    image: undefined\n                },\n                formState.inputs.email.isValid && formState.inputs.password.isValid\n            );\n        } else {\n            setFormData({\n                ...formState.inputs,\n                name: {\n                    value: '',\n                    isValid: false\n                },\n                image: {\n                    value: null,\n                    isValid: false\n                }\n            }, false);\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    }\n\n    const errorHandler = () => {\n        clearError();\n    }\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError}/>\n            <Card className=\"authentication\">\n                {isLoading && <LoadingSpinner asOverlay/>}\n                <h2>Login Required</h2>\n                <hr />\n                <form onSubmit={authSubmitHandler}>\n                    {!isLoginMode && (\n                        <Input\n                            element=\"input\" \n                            id=\"name\" \n                            type=\"text\" \n                            label=\"Your Name\" \n                            validators={[VALIDATOR_REQUIRE()]} \n                            errorText=\"Please enter a name!\" \n                            onInput={inputHandler}\n                        />\n                    )}\n                    {!isLoginMode && (<ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Please provide an image.\" />)}\n                    <Input\n                        element=\"input\" \n                        id=\"email\" \n                        type=\"email\" \n                        label=\"E-mail\" \n                        validators={[VALIDATOR_EMAIL()]} \n                        errorText=\"Please enter a valid email address!\" \n                        onInput={inputHandler} \n                    />\n                    <Input \n                        element=\"input\" \n                        id=\"password\" \n                        type=\"password\" \n                        label=\"Password\" \n                        validators={[VALIDATOR_MINLENGTH(6)]} \n                        errorText=\"Please enter a valid password of at least 6 characters!\" \n                        onInput={inputHandler} \n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>{isLoginMode ? 'LOGIN' : 'SIGNUP'}</Button>\n                </form>\n                <Button inverse onClick={switchModeHandler}>SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}</Button>\n            </Card>\n        </React.Fragment>\n    );\n}\n\nexport default Auth;\n"],"sourceRoot":""}